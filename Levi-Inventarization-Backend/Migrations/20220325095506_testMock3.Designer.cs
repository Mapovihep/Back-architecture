// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Levi_Inventarization_Backend.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220325095506_testMock3")]
    partial class testMock3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Defect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("Defects");
                });

            modelBuilder.Entity("Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e352b0f-b369-4f51-b723-a7e4784188c8"),
                            CreatedAt = new DateTime(2021, 1, 24, 17, 54, 39, 230, DateTimeKind.Local),
                            Name = "Office Department",
                            UpdateBy = new Guid("aeadeca8-666d-4b7c-8858-d08feb6838fb")
                        });
                });

            modelBuilder.Entity("Entities.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SetupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SetupId");

                    b.HasIndex("UserId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("85820674-82db-4b4b-a521-8578cea9849a"),
                            CreatedAt = new DateTime(2022, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("7e352b0f-b369-4f51-b723-a7e4784188c8"),
                            Name = "Ruby"
                        },
                        new
                        {
                            Id = new Guid("0268c3ff-c937-4932-9d91-6cabdb65b3e0"),
                            CreatedAt = new DateTime(2022, 3, 4, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("7e352b0f-b369-4f51-b723-a7e4784188c8"),
                            Name = "Node"
                        },
                        new
                        {
                            Id = new Guid("dc743943-6c5c-4d4e-9c6c-fc45f531f98e"),
                            CreatedAt = new DateTime(2022, 3, 4, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("7e352b0f-b369-4f51-b723-a7e4784188c8"),
                            Name = ".Net"
                        });
                });

            modelBuilder.Entity("Entities.Setup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Setups");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SetupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SetupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SetupId")
                        .IsUnique()
                        .HasFilter("[SetupId] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d70a0553-4c29-4f87-a43e-3951cc1daa38"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 6, 128, DateTimeKind.Local).AddTicks(6379),
                            Email = "0",
                            IsAdmin = true,
                            LastName = "",
                            Name = "",
                            Password = "0",
                            Phone = "2",
                            UpdateBy = new Guid("6cec4e79-048d-4234-84bc-f6c6de502e0e")
                        },
                        new
                        {
                            Id = new Guid("8907d3c7-0cd5-4de3-8df4-5ba0063f9357"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 6, 128, DateTimeKind.Local).AddTicks(6422),
                            Email = "1",
                            IsAdmin = false,
                            LastName = "V",
                            Name = "h",
                            Password = "1",
                            Phone = "3",
                            UpdateBy = new Guid("4fe861d4-27aa-406e-957a-8c5201716360")
                        },
                        new
                        {
                            Id = new Guid("441576a7-bc71-4d14-994b-94cddf8191b2"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 6, 128, DateTimeKind.Local).AddTicks(6443),
                            Email = "2",
                            IsAdmin = false,
                            LastName = "xG",
                            Name = "md",
                            Password = "2",
                            Phone = "0",
                            UpdateBy = new Guid("a3493027-43a8-4da6-b098-d04cd0c7e9c7")
                        },
                        new
                        {
                            Id = new Guid("1c115248-b1cc-4fbc-a607-66f6c952e8c9"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 6, 128, DateTimeKind.Local).AddTicks(6454),
                            Email = "3",
                            IsAdmin = true,
                            LastName = "JLd",
                            Name = "TvA",
                            Password = "3",
                            Phone = "1",
                            UpdateBy = new Guid("87442ccb-7309-43aa-b7a9-4c384254b6dd")
                        },
                        new
                        {
                            Id = new Guid("ee4d33f9-5a94-4461-9ea2-9e2295d684c4"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 6, 128, DateTimeKind.Local).AddTicks(6460),
                            Email = "4",
                            IsAdmin = false,
                            LastName = "UOCp",
                            Name = "icWJ",
                            Password = "4",
                            Phone = "6",
                            UpdateBy = new Guid("b212ab07-dd9b-4778-9f68-ad8d7cadb203")
                        },
                        new
                        {
                            Id = new Guid("54de72cb-b1ff-4803-b4eb-7d211823e03a"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 6, 128, DateTimeKind.Local).AddTicks(6494),
                            Email = "5",
                            IsAdmin = false,
                            LastName = "HAikr",
                            Name = "ucoTw",
                            Password = "5",
                            Phone = "7",
                            UpdateBy = new Guid("45480663-1141-45d5-b4ae-098ef3b19023")
                        },
                        new
                        {
                            Id = new Guid("476b60d6-b579-4ed7-8150-69cf5ff734b7"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 6, 128, DateTimeKind.Local).AddTicks(6501),
                            Email = "6",
                            IsAdmin = true,
                            LastName = "KonDaP",
                            Name = "awnKaV",
                            Password = "6",
                            Phone = "4",
                            UpdateBy = new Guid("9ef660ad-0e1c-41d7-8ee0-18f85c7de71c")
                        },
                        new
                        {
                            Id = new Guid("a9147208-a488-4407-ac59-d0f52029e20c"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 6, 128, DateTimeKind.Local).AddTicks(6510),
                            Email = "7",
                            IsAdmin = false,
                            LastName = "XPIOZHt",
                            Name = "ZUpjVUg",
                            Password = "7",
                            Phone = "5",
                            UpdateBy = new Guid("7fc359a0-83d2-41e4-81b6-69a52ecc24b5")
                        },
                        new
                        {
                            Id = new Guid("27aa471e-f6e4-4487-8a14-c28414e56ff5"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 6, 128, DateTimeKind.Local).AddTicks(6518),
                            Email = "8",
                            IsAdmin = false,
                            LastName = "sRWXrdsM",
                            Name = "myvXUvpT",
                            Password = "8",
                            Phone = "10",
                            UpdateBy = new Guid("7ca2980f-73e5-4017-8c91-fbcaded621c3")
                        },
                        new
                        {
                            Id = new Guid("aeadeca8-666d-4b7c-8858-d08feb6838fb"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 6, 128, DateTimeKind.Local).AddTicks(6526),
                            Email = "10",
                            IsAdmin = true,
                            LastName = "JpWYhEByAc",
                            Name = "ULPdEVPxPm",
                            Password = "10",
                            Phone = "10",
                            UpdateBy = new Guid("63d4de99-ae42-497e-abd8-8ff393392558")
                        });
                });

            modelBuilder.Entity("Entities.Defect", b =>
                {
                    b.HasOne("Entities.Inventory", "Inventory")
                        .WithMany("DefectList")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Entities.Inventory", b =>
                {
                    b.HasOne("Entities.Department", null)
                        .WithMany("InventoryList")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Entities.Room", "Room")
                        .WithMany("InventoryList")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Entities.Setup", "Setup")
                        .WithMany("InventoryList")
                        .HasForeignKey("SetupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Entities.User", "User")
                        .WithMany("InventoryList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Room");

                    b.Navigation("Setup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Room", b =>
                {
                    b.HasOne("Entities.Department", null)
                        .WithMany("RoomsList")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("Entities.Setup", b =>
                {
                    b.HasOne("Entities.Room", "Room")
                        .WithMany("SetupList")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.HasOne("Entities.Setup", "Setup")
                        .WithOne("User")
                        .HasForeignKey("Entities.User", "SetupId");

                    b.Navigation("Setup");
                });

            modelBuilder.Entity("Entities.Department", b =>
                {
                    b.Navigation("InventoryList");

                    b.Navigation("RoomsList");
                });

            modelBuilder.Entity("Entities.Inventory", b =>
                {
                    b.Navigation("DefectList");
                });

            modelBuilder.Entity("Entities.Room", b =>
                {
                    b.Navigation("InventoryList");

                    b.Navigation("SetupList");
                });

            modelBuilder.Entity("Entities.Setup", b =>
                {
                    b.Navigation("InventoryList");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("InventoryList");
                });
#pragma warning restore 612, 618
        }
    }
}
