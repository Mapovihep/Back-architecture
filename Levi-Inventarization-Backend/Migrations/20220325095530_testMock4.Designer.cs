// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Levi_Inventarization_Backend.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220325095530_testMock4")]
    partial class testMock4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Defect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("Defects");
                });

            modelBuilder.Entity("Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea9da194-1f06-4639-925b-64255483df7b"),
                            CreatedAt = new DateTime(2021, 1, 24, 17, 54, 39, 230, DateTimeKind.Local),
                            Name = "Office Department",
                            UpdateBy = new Guid("48a10b7e-6b57-457d-b9ec-38585ac2bc52")
                        });
                });

            modelBuilder.Entity("Entities.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SetupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SetupId");

                    b.HasIndex("UserId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3d7fbf7-0cbe-4fda-96ee-cd5140281291"),
                            CreatedAt = new DateTime(2022, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("ea9da194-1f06-4639-925b-64255483df7b"),
                            Name = "Ruby"
                        },
                        new
                        {
                            Id = new Guid("4ba4825a-1dce-4291-b6e3-025f9032409e"),
                            CreatedAt = new DateTime(2022, 3, 4, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("ea9da194-1f06-4639-925b-64255483df7b"),
                            Name = "Node"
                        },
                        new
                        {
                            Id = new Guid("5f0c319b-7751-4e45-997e-4b82308312d2"),
                            CreatedAt = new DateTime(2022, 3, 4, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("ea9da194-1f06-4639-925b-64255483df7b"),
                            Name = ".Net"
                        });
                });

            modelBuilder.Entity("Entities.Setup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Setups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("297510f1-9dfb-47d9-a1fc-130e08406ba1"),
                            Category = "WorkPlaces",
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 29, 964, DateTimeKind.Local).AddTicks(2372),
                            Name = "Ruby Work Desk",
                            QRCode = "QRCode",
                            RoomName = "Ruby",
                            Status = false,
                            UpdatedAt = new DateTime(2022, 3, 5, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("48a10b7e-6b57-457d-b9ec-38585ac2bc52"),
                            UserId = new Guid("64109abb-3cc7-45de-a727-18fdc8849574")
                        },
                        new
                        {
                            Id = new Guid("51e2cecb-3614-491a-a90f-e5a0dea9a56b"),
                            Category = "WorkPlaces",
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 29, 964, DateTimeKind.Local).AddTicks(2392),
                            Name = "Node Work Desk",
                            QRCode = "QRCode",
                            RoomName = "Node",
                            Status = false,
                            UpdatedAt = new DateTime(2022, 3, 10, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("48a10b7e-6b57-457d-b9ec-38585ac2bc52"),
                            UserId = new Guid("76c3969e-642e-4cb5-a221-8b9b1aa32536")
                        },
                        new
                        {
                            Id = new Guid("cff8fdb3-010b-41b2-86bc-0da4fb43788f"),
                            Category = "WorkPlaces",
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 29, 964, DateTimeKind.Local).AddTicks(2396),
                            Name = ".Net Work Desk",
                            QRCode = "QRCode",
                            RoomName = ".Net",
                            Status = false,
                            UpdatedAt = new DateTime(2022, 3, 10, 2, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("48a10b7e-6b57-457d-b9ec-38585ac2bc52"),
                            UserId = new Guid("9ad36067-6e1f-4f19-9b84-38569c98b5e5")
                        });
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SetupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SetupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SetupId")
                        .IsUnique()
                        .HasFilter("[SetupId] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("64109abb-3cc7-45de-a727-18fdc8849574"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 29, 964, DateTimeKind.Local).AddTicks(2146),
                            Email = "0",
                            IsAdmin = true,
                            LastName = "",
                            Name = "",
                            Password = "0",
                            Phone = "2",
                            UpdateBy = new Guid("a3824c2d-1e34-4356-a06f-7d63546bb6c6")
                        },
                        new
                        {
                            Id = new Guid("76c3969e-642e-4cb5-a221-8b9b1aa32536"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 29, 964, DateTimeKind.Local).AddTicks(2186),
                            Email = "1",
                            IsAdmin = false,
                            LastName = "N",
                            Name = "s",
                            Password = "1",
                            Phone = "3",
                            UpdateBy = new Guid("0b4ba2a4-ec09-48e1-aca6-54493a15dedc")
                        },
                        new
                        {
                            Id = new Guid("9ad36067-6e1f-4f19-9b84-38569c98b5e5"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 29, 964, DateTimeKind.Local).AddTicks(2207),
                            Email = "2",
                            IsAdmin = false,
                            LastName = "ZZ",
                            Name = "Sv",
                            Password = "2",
                            Phone = "0",
                            UpdateBy = new Guid("792b1963-ff4d-4cbc-9241-cc102d1cc5fb")
                        },
                        new
                        {
                            Id = new Guid("13f7a3d4-8b15-432a-98d9-b118a09b7f15"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 29, 964, DateTimeKind.Local).AddTicks(2241),
                            Email = "3",
                            IsAdmin = true,
                            LastName = "psa",
                            Name = "kZp",
                            Password = "3",
                            Phone = "1",
                            UpdateBy = new Guid("9c3cd523-5c6f-46cc-af17-7a49efac58a0")
                        },
                        new
                        {
                            Id = new Guid("4646f67a-c751-4e11-8af0-91d7575eb49f"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 29, 964, DateTimeKind.Local).AddTicks(2248),
                            Email = "4",
                            IsAdmin = false,
                            LastName = "fJQI",
                            Name = "NSjI",
                            Password = "4",
                            Phone = "6",
                            UpdateBy = new Guid("63a52faa-99d0-4754-90cd-117e207322d7")
                        },
                        new
                        {
                            Id = new Guid("63e4f715-f264-441f-bec5-6407fc6f4e4b"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 29, 964, DateTimeKind.Local).AddTicks(2257),
                            Email = "5",
                            IsAdmin = false,
                            LastName = "AyotP",
                            Name = "uYyFc",
                            Password = "5",
                            Phone = "7",
                            UpdateBy = new Guid("af74c14f-7cab-41fe-8c50-35d6520a745b")
                        },
                        new
                        {
                            Id = new Guid("70741402-7368-4cc7-9dd2-3712d00079dd"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 29, 964, DateTimeKind.Local).AddTicks(2264),
                            Email = "6",
                            IsAdmin = true,
                            LastName = "NybSPt",
                            Name = "nmNxMW",
                            Password = "6",
                            Phone = "4",
                            UpdateBy = new Guid("910f8974-65b9-40bc-966a-638525c74add")
                        },
                        new
                        {
                            Id = new Guid("bcbbed2a-9fa5-4f8c-a6e4-8d805f758e7e"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 29, 964, DateTimeKind.Local).AddTicks(2273),
                            Email = "7",
                            IsAdmin = false,
                            LastName = "fjkAkbh",
                            Name = "yOixgqr",
                            Password = "7",
                            Phone = "5",
                            UpdateBy = new Guid("9d8712ec-55c1-4f7c-b5b6-39df58c3c696")
                        },
                        new
                        {
                            Id = new Guid("b5a3d934-0530-488f-b110-e63c9e5edf82"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 29, 964, DateTimeKind.Local).AddTicks(2280),
                            Email = "8",
                            IsAdmin = false,
                            LastName = "JVuUKtJk",
                            Name = "PvbDMmZU",
                            Password = "8",
                            Phone = "10",
                            UpdateBy = new Guid("a3730a8a-2d8c-4d12-a39c-3fa879c4a936")
                        },
                        new
                        {
                            Id = new Guid("48a10b7e-6b57-457d-b9ec-38585ac2bc52"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 55, 29, 964, DateTimeKind.Local).AddTicks(2290),
                            Email = "10",
                            IsAdmin = true,
                            LastName = "ifxdGGYZIm",
                            Name = "SJiofPjPnU",
                            Password = "10",
                            Phone = "10",
                            UpdateBy = new Guid("2a0ef830-5d13-4273-8e19-c2b9988f7721")
                        });
                });

            modelBuilder.Entity("Entities.Defect", b =>
                {
                    b.HasOne("Entities.Inventory", "Inventory")
                        .WithMany("DefectList")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Entities.Inventory", b =>
                {
                    b.HasOne("Entities.Department", null)
                        .WithMany("InventoryList")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Entities.Room", "Room")
                        .WithMany("InventoryList")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Entities.Setup", "Setup")
                        .WithMany("InventoryList")
                        .HasForeignKey("SetupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Entities.User", "User")
                        .WithMany("InventoryList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Room");

                    b.Navigation("Setup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Room", b =>
                {
                    b.HasOne("Entities.Department", null)
                        .WithMany("RoomsList")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("Entities.Setup", b =>
                {
                    b.HasOne("Entities.Room", "Room")
                        .WithMany("SetupList")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.HasOne("Entities.Setup", "Setup")
                        .WithOne("User")
                        .HasForeignKey("Entities.User", "SetupId");

                    b.Navigation("Setup");
                });

            modelBuilder.Entity("Entities.Department", b =>
                {
                    b.Navigation("InventoryList");

                    b.Navigation("RoomsList");
                });

            modelBuilder.Entity("Entities.Inventory", b =>
                {
                    b.Navigation("DefectList");
                });

            modelBuilder.Entity("Entities.Room", b =>
                {
                    b.Navigation("InventoryList");

                    b.Navigation("SetupList");
                });

            modelBuilder.Entity("Entities.Setup", b =>
                {
                    b.Navigation("InventoryList");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("InventoryList");
                });
#pragma warning restore 612, 618
        }
    }
}
