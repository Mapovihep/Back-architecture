// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Levi_Inventarization_Backend.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220325095436_testMockRooms")]
    partial class testMockRooms
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Defect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("Defects");
                });

            modelBuilder.Entity("Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("79fa6059-18a4-4067-baa9-0a5b891a6292"),
                            CreatedAt = new DateTime(2021, 1, 24, 17, 54, 39, 230, DateTimeKind.Local),
                            Name = "Office Department",
                            UpdateBy = new Guid("22c0915c-68b4-43e7-bed2-ad1ace423777")
                        });
                });

            modelBuilder.Entity("Entities.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SetupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SetupId");

                    b.HasIndex("UserId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Entities.Setup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Setups");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SetupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SetupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SetupId")
                        .IsUnique()
                        .HasFilter("[SetupId] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2677da7d-3bf5-4395-b080-cf33022580f1"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 54, 36, 534, DateTimeKind.Local).AddTicks(3004),
                            Email = "0",
                            IsAdmin = true,
                            LastName = "",
                            Name = "",
                            Password = "0",
                            Phone = "2",
                            UpdateBy = new Guid("d93b898e-dd1e-41c7-ac43-98fc91741b53")
                        },
                        new
                        {
                            Id = new Guid("5861a1e7-a408-4c74-a84c-62dfc9e7b7e7"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 54, 36, 534, DateTimeKind.Local).AddTicks(3052),
                            Email = "1",
                            IsAdmin = false,
                            LastName = "N",
                            Name = "a",
                            Password = "1",
                            Phone = "3",
                            UpdateBy = new Guid("ded32b86-fd73-4ae9-bf55-9a7096a10dc9")
                        },
                        new
                        {
                            Id = new Guid("02701b86-fefb-4d8c-9c82-a2f466678731"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 54, 36, 534, DateTimeKind.Local).AddTicks(3071),
                            Email = "2",
                            IsAdmin = false,
                            LastName = "Nd",
                            Name = "aD",
                            Password = "2",
                            Phone = "0",
                            UpdateBy = new Guid("c72505fe-afb9-4281-a7be-690fb150e83b")
                        },
                        new
                        {
                            Id = new Guid("def23a17-3e8d-4eb5-a1b2-70749c6a398d"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 54, 36, 534, DateTimeKind.Local).AddTicks(3077),
                            Email = "3",
                            IsAdmin = true,
                            LastName = "TVC",
                            Name = "EGX",
                            Password = "3",
                            Phone = "1",
                            UpdateBy = new Guid("3a98bf30-5810-4110-88bc-06e30c5e0591")
                        },
                        new
                        {
                            Id = new Guid("21fa6dde-3af2-4c4e-b3e4-1d709d96a47d"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 54, 36, 534, DateTimeKind.Local).AddTicks(3083),
                            Email = "4",
                            IsAdmin = false,
                            LastName = "peSQ",
                            Name = "ksvF",
                            Password = "4",
                            Phone = "6",
                            UpdateBy = new Guid("88e3fd9e-706b-4a54-8318-794786256609")
                        },
                        new
                        {
                            Id = new Guid("b110161e-7fa4-48ea-b709-b3be228b714f"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 54, 36, 534, DateTimeKind.Local).AddTicks(3094),
                            Email = "5",
                            IsAdmin = false,
                            LastName = "ytBgy",
                            Name = "jrier",
                            Password = "5",
                            Phone = "7",
                            UpdateBy = new Guid("d0dcef66-b5d0-4361-a1a8-4c56a0b5eb8b")
                        },
                        new
                        {
                            Id = new Guid("b7724312-b91a-4cc2-a061-224c7bd46e03"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 54, 36, 534, DateTimeKind.Local).AddTicks(3101),
                            Email = "6",
                            IsAdmin = true,
                            LastName = "ZwOIEm",
                            Name = "AfyomX",
                            Password = "6",
                            Phone = "4",
                            UpdateBy = new Guid("6236e15e-09ed-407d-8eb6-b6fb69f8c54c")
                        },
                        new
                        {
                            Id = new Guid("8c3c8bdb-1437-4605-8d46-fa5ef47f263f"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 54, 36, 534, DateTimeKind.Local).AddTicks(3108),
                            Email = "7",
                            IsAdmin = false,
                            LastName = "cVBiGLJ",
                            Name = "HMtXEWR",
                            Password = "7",
                            Phone = "5",
                            UpdateBy = new Guid("8b28bcbd-e29a-4e6b-b316-d8c73f626c93")
                        },
                        new
                        {
                            Id = new Guid("0c02dc2e-2ef4-4bcd-a633-1085fd165efe"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 54, 36, 534, DateTimeKind.Local).AddTicks(3114),
                            Email = "8",
                            IsAdmin = false,
                            LastName = "SZCAMytw",
                            Name = "NdeHHBsb",
                            Password = "8",
                            Phone = "10",
                            UpdateBy = new Guid("b3805486-47a5-48bc-90ec-02c3d682d6c8")
                        },
                        new
                        {
                            Id = new Guid("22c0915c-68b4-43e7-bed2-ad1ace423777"),
                            CreatedAt = new DateTime(2022, 3, 25, 12, 54, 36, 534, DateTimeKind.Local).AddTicks(3124),
                            Email = "10",
                            IsAdmin = true,
                            LastName = "yMYOnCnmWX",
                            Name = "CqzTcOWBUf",
                            Password = "10",
                            Phone = "10",
                            UpdateBy = new Guid("3a5d4289-4d01-4012-9dc7-7687d9d27bf3")
                        });
                });

            modelBuilder.Entity("Entities.Defect", b =>
                {
                    b.HasOne("Entities.Inventory", "Inventory")
                        .WithMany("DefectList")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Entities.Inventory", b =>
                {
                    b.HasOne("Entities.Department", null)
                        .WithMany("InventoryList")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Entities.Room", "Room")
                        .WithMany("InventoryList")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Entities.Setup", "Setup")
                        .WithMany("InventoryList")
                        .HasForeignKey("SetupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Entities.User", "User")
                        .WithMany("InventoryList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Room");

                    b.Navigation("Setup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Room", b =>
                {
                    b.HasOne("Entities.Department", null)
                        .WithMany("RoomsList")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("Entities.Setup", b =>
                {
                    b.HasOne("Entities.Room", "Room")
                        .WithMany("SetupList")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.HasOne("Entities.Setup", "Setup")
                        .WithOne("User")
                        .HasForeignKey("Entities.User", "SetupId");

                    b.Navigation("Setup");
                });

            modelBuilder.Entity("Entities.Department", b =>
                {
                    b.Navigation("InventoryList");

                    b.Navigation("RoomsList");
                });

            modelBuilder.Entity("Entities.Inventory", b =>
                {
                    b.Navigation("DefectList");
                });

            modelBuilder.Entity("Entities.Room", b =>
                {
                    b.Navigation("InventoryList");

                    b.Navigation("SetupList");
                });

            modelBuilder.Entity("Entities.Setup", b =>
                {
                    b.Navigation("InventoryList");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("InventoryList");
                });
#pragma warning restore 612, 618
        }
    }
}
